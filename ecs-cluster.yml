---
AWSTemplateFormatVersion: "2010-09-09"
Description: ECS Cluster template


Parameters:

  ClusterName:
    Type: String
    Description: Name of the cluster

  VPC:
    Type: AWS::EC2::VPC::Id
    Description: VPC of the container instances

  Subnets:
    Type: List<AWS::EC2::Subnet::Id>
    Description: List of subnet of instances will run, must on same VPC

  KeyPair:
    Type: AWS::EC2::KeyPair::KeyName
    Description: SSH key for container instance

  InstanceType:
    Type: String
    Description: Type of the container instances
    Default: t2.small

  RootBlockSize:
    Type: Number
    Description: Size of the root volume for each container instance
    Default: 8
    MinValue: 8

  DeviceMapperBlockSize:
    Type: Number
    Description: Size of the block device for devicemapper, only relevant if you set UseInstanceStoreBlock to No
    Default: 22
    MinValue: 22

  UseInstanceStoreBlock:
    Type: String
    Description: Use instance store for docker devicemapper, only some instance type can have it
    AllowedValues:
      - "Yes"
      - "No"
    Default: "No"

  MinCapacity:
    Type: Number
    Description: Minimal size of the autoscaling group
    Default: 1
    MinValue: 1

  DesiredCapacity:
    Type: Number
    Description: Desired size of the autoscaling group
    Default: 1
    MinValue: 1

  MaxCapacity:
    Type: Number
    Description: Maximal size of the autoscaling group
    Default: 10
    MinValue: 1

  EnableAutoScalingUp:
    Type: String
    Description: Enable auto scaling up on the autoscaling group
    AllowedValues:
      - "Yes"
      - "No"
    Default: "No"

  EnableAutoScalingDown:
    Type: String
    Description: Enable auto scaling down on the autoscaling group
    AllowedValues:
      - "Yes"
      - "No"
    Default: "No"


Outputs:

  OutputCluster:
    Description: ECS Cluster Name
    Value: !Ref Cluster
    Export:
      Name: !Sub ${AWS::StackName}:Cluster

  OutputInstanceSecurityGroup:
    Description: Security Group of container instances
    Value: !Ref InstanceSecurityGroup
    Export:
      Name: !Sub ${AWS::StackName}:InstanceSecurityGroup

  OutputIamRole:
    Description: IAM Role of the container instances
    Value: !Ref IAMRole
    Export:
      Name: !Sub ${AWS::StackName}:IAMRole


Metadata:

  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: General Configuration
        Parameters:
          - ClusterName
      - Label:
          default: Networking
        Parameters:
          - VPC
          - Subnets
      - Label:
          default: Auto Scaling Group
        Parameters:
          - KeyPair
          - InstanceType
          - RootBlockSize
          - DeviceMapperBlockSize
          - UseInstanceStoreBlock
          - MinCapacity
          - DesiredCapacity
          - MaxCapacity
          - EnableAutoScalingUp
          - EnableAutoScalingDown


Conditions:
  IsUseInstanceStoreBlock: !Equals
    - "Yes"
    - !Ref UseInstanceStoreBlock

  IsEnableAutoScalingUp: !Equals
    - "Yes"
    - !Ref EnableAutoScalingUp

  IsEnableAutoScalingDown: !Equals
    - "Yes"
    - !Ref EnableAutoScalingDown


Mappings:

  # see: http://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI_launch_latest.html
  AmiRegionMap:
    us-east-1:
      amd64: ami-275ffe31
    us-east-2:
      amd64: ami-62745007
    us-west-1:
      amd64: ami-689bc208
    us-west-2:
      amd64: ami-62d35c02
    eu-west-1:
      amd64: ami-95f8d2f3
    eu-west-2:
      amd64: ami-bf9481db
    eu-central-1:
      amd64: ami-085e8a67
    ap-northeast-1:
      amd64: ami-f63f6f91
    ap-southeast-1:
      amd64: ami-b4ae1dd7
    ap-southeast-2:
      amd64: ami-fbe9eb98
    ca-central-1:
      amd64: ami-ee58e58a


Resources:

  Cluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Ref ClusterName


  # IAM

  IAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: ec2.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role

  IAMInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref IAMRole


  # Security Group

  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: !Sub ${AWS::StackName}-instance-group


  # Auto scaling group

  LaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !FindInMap
        - AmiRegionMap
        - !Ref AWS::Region
        - amd64
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyPair
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeType: gp2
            VolumeSize: !Ref RootBlockSize

        # see: http://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-ami-storage-config.html#ecs-AMI-LVM
        # /dev/xvdcz need to be a block device
        - Fn::If:
          - IsUseInstanceStoreBlock
          - DeviceName: /dev/xvdcz
            VirtualName: ephemeral0
          - DeviceName: /dev/xvdcz
            Ebs:
              VolumeType: gp2
              VolumeSize: !Ref DeviceMapperBlockSize

      SecurityGroups:
        - !Ref InstanceSecurityGroup
      IamInstanceProfile: !Ref IAMInstanceProfile
      UserData:
        Fn::Base64:
          Fn::Sub: |
            #!/bin/bash
            cat <<'EOF' > /etc/ecs/ecs.config
            ECS_CLUSTER=${Cluster}
            ECS_ENGINE_TASK_CLEANUP_WAIT_DURATION=1m
            EOF

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchConfigurationName: !Ref LaunchConfiguration
      Cooldown: 60
      HealthCheckType: EC2
      HealthCheckGracePeriod: 60
      MinSize: !Ref MinCapacity
      DesiredCapacity: !Ref DesiredCapacity
      MaxSize: !Ref MaxCapacity
      VPCZoneIdentifier: !Ref Subnets


  # Scaling up policy

  HighCpuReservationAlarm:
    Condition: IsEnableAutoScalingUp
    Type: AWS::CloudWatch::Alarm
    Properties:
      Namespace: AWS/ECS
      MetricName: CPUReservation
      Dimensions:
        - Name: ClusterName
          Value: !Ref Cluster
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Threshold: 60
      Statistic: Maximum
      EvaluationPeriods: 1
      Period: 60
      AlarmActions:
        - !Ref ScalingUpPolicy

  HighMemoryReservationAlarm:
    Condition: IsEnableAutoScalingUp
    Type: AWS::CloudWatch::Alarm
    Properties:
      Namespace: AWS/ECS
      MetricName: MemoryReservation
      Dimensions:
        - Name: ClusterName
          Value: !Ref Cluster
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Threshold: 60
      Statistic: Maximum
      EvaluationPeriods: 1
      Period: 60
      AlarmActions:
        - !Ref ScalingUpPolicy

  ScalingUpPolicy:
    Condition: IsEnableAutoScalingUp
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref AutoScalingGroup
      AdjustmentType: ChangeInCapacity
      ScalingAdjustment: 1


  # Scaling down policy

  LowCpuReservationAlarm:
    Condition: IsEnableAutoScalingDown
    Type: AWS::CloudWatch::Alarm
    Properties:
      Namespace: AWS/ECS
      MetricName: CPUReservation
      Dimensions:
        - Name: ClusterName
          Value: !Ref Cluster
      ComparisonOperator: LessThanThreshold
      Threshold: 25
      Statistic: Maximum
      EvaluationPeriods: 45
      Period: 60

  LowMemoryReservationAlarm:
    Condition: IsEnableAutoScalingDown
    Type: AWS::CloudWatch::Alarm
    Properties:
      Namespace: AWS/ECS
      MetricName: MemoryReservation
      Dimensions:
        - Name: ClusterName
          Value: !Ref Cluster
      ComparisonOperator: LessThanThreshold
      Threshold: 25
      Statistic: Maximum
      EvaluationPeriods: 45
      Period: 60

  ScheduledEvent:
    Condition: IsEnableAutoScalingDown
    Type: AWS::Events::Rule
    Properties:
      ScheduleExpression: rate(5 minutes)
      Targets:
        - Arn: !GetAtt ScalingDownLambda.Arn
          Id: ScalingDownLambdaTarget

  ScheduledEventActionPolicy:
    Condition: IsEnableAutoScalingDown
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt ScalingDownLambda.Arn
      Principal: events.amazonaws.com

  LambdaScalingDownRole:
    Condition: IsEnableAutoScalingDown
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: lambda.amazonaws.com
      Policies:
        - PolicyName: default
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
            # TODO: Split into multiple statement and set apropriate Resource ARN
            - Effect: Allow
              Action:
                - "autoscaling:DescribeAutoScalingGroups"
                - "autoscaling:DetachInstances"
                - "cloudwatch:DescribeAlarms"
                - "ecs:DeregisterContainerInstance"
                - "ecs:DescribeContainerInstances"
                - "ecs:ListContainerInstances"
                - "ec2:TerminateInstances"
                - "logs:CreateLogGroup"
                - "logs:CreateLogStream"
                - "logs:PutLogEvents"
              Resource:
                - "*"

  # The function cannot be store on external storage (S3)
  # because it's need some parameter that generated by current template
  ScalingDownLambda:
    Condition: IsEnableAutoScalingDown
    Type: AWS::Lambda::Function
    Properties:
      Role: !GetAtt LambdaScalingDownRole.Arn
      Runtime: python2.7
      Handler: index.lambda_handler
      Timeout: 180
      Code:
        ZipFile:
          Fn::Sub: |
            from __future__ import print_function


            #####################
            # Script parameters #
            #####################

            cluster_name="${Cluster}"
            autoscaling_name="${AutoScalingGroup}"
            lowmem_alarm="${LowMemoryReservationAlarm}"
            lowcpu_alarm="${LowCpuReservationAlarm}"


            ###############
            # Script body #
            ###############

            import time
            import boto3

            cw = boto3.resource("cloudwatch")
            asc = boto3.client("autoscaling")
            ecsc = boto3.client("ecs")
            ec2c = boto3.client("ec2")

            def lambda_handler(event, context):
              if need_to_scale_down():
                do_scaling_down()

            def need_to_scale_down():
              asg = asc.describe_auto_scaling_groups(AutoScalingGroupNames=[autoscaling_name])["AutoScalingGroups"][0]
              asg_cur = asg["DesiredCapacity"]
              asg_min = asg["MinSize"]
              mem = cw.Alarm(lowmem_alarm).state_value
              cpu = cw.Alarm(lowcpu_alarm).state_value
              return asg_cur > asg_min and mem == "ALARM" and cpu == "ALARM"

            def do_scaling_down():
              group_instances = get_group_instances()
              cluster_instances = get_cluster_empty_instances()

              for x in group_instances:
                if not cluster_instances.has_key(x):
                  continue
                if deregister_from_cluster(cluster_instances[x]):
                  terminate_from_autoscaling_group(x)
                  print("Successfully terminate (%s : %s)" % (x, cluster_instances[x]))
                  break

            def get_group_instances():
              ret = []
              asg = asc.describe_auto_scaling_groups(AutoScalingGroupNames=[autoscaling_name])["AutoScalingGroups"][0]
              for x in asg["Instances"]:
                ret.append(x["InstanceId"])
              return ret

            def get_cluster_empty_instances():
              ret = {}
              nextToken = ""
              while True:
                tmp = ecsc.list_container_instances(cluster=cluster_name, maxResults=25, nextToken=nextToken)
                nextToken = tmp["nextToken"] if tmp.has_key("nextToken") else ""
                tmp = ecsc.describe_container_instances(cluster=cluster_name, containerInstances=tmp["containerInstanceArns"])
                for x in tmp["containerInstances"]:
                  if x["runningTasksCount"] == 0:
                    ret[x["ec2InstanceId"]] = x["containerInstanceArn"]
                if nextToken == "":
                  break
              return ret

            def deregister_from_cluster(container_instance):
              try:
                ecsc.deregister_container_instance(cluster=cluster_name, force=False, containerInstance=container_instance)
                return True
              except:
                return False

            def terminate_from_autoscaling_group(instance):
              while True:
                try:
                  asc.detach_instances(AutoScalingGroupName=autoscaling_name, ShouldDecrementDesiredCapacity=True, InstanceIds=[instance])
                  break
                except:
                  time.sleep(1)
              while True:
                if not (instance in get_group_instances()):
                  break
                time.sleep(1)
              ec2c.terminate_instances(InstanceIds=[instance], DryRun=False)
